/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/004/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/004/gcode.js":
/*!**************************!*\
  !*** ./src/004/gcode.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return gcode; });\nclass gcode {\n  constructor() {\n    this.path = '';\n    this.coords = [];\n    this.commands = [];\n    this.lastCoord = {};\n    this.regex = /([a-zA-Z])+\\s?((?:[0-9-+.,]+\\s?)*)/g;\n  }\n\n  parseSVG(path) {\n    this.coords = [];\n    this.commands = [];\n    this.path = path;\n    this.execRegex();\n    return this.coords;\n  }\n\n  parseAndRound(value) {\n    if (typeof value === 'number') return value;\n    let f = parseFloat(value);\n    return Number(Math.round(f / 2 + 'e' + 3) + 'e-' + 3);\n  }\n\n  execRegex() {\n    let result;\n    let prev;\n\n    while ((result = this.regex.exec(this.path)) !== null) {\n      let type = result[1];\n      let coord = result[2];\n      let endline = result[3];\n\n      switch (type.toUpperCase()) {\n        case 'M':\n          coord = coord.trim().split(/[\\s,]+/);\n          type === type.toUpperCase() ? this.moveTo(type, coord) : this.moveFromTo(type, coord);\n          break;\n\n        case 'L':\n          coord = coord.trim().split(/[\\s,]+/);\n          type === type.toUpperCase() ? this.moveTo(type, coord) : this.moveFromTo(type, coord);\n          break;\n\n        case 'H':\n          coord = coord.trim().split(/[\\s,]+/);\n          coord.push(type === type.toUpperCase() ? this.coords[this.coords.length - 1].x : '0');\n          type === type.toUpperCase() ? this.moveTo(type, coord) : this.moveFromTo(type, coord);\n          break;\n\n        case 'V':\n          coord = coord.trim().split(/[\\s,]+/);\n          coord.unshift(type === type.toUpperCase() ? this.coords[this.coords.length - 1].y : '0');\n          type === type.toUpperCase() ? this.moveTo(type, coord) : this.moveFromTo(type, coord);\n          break;\n\n        case 'C':\n          coord = coord.split(/[,]+/);\n          var mapCoord = coord.map(el => {\n            var tmp = el.trim().split(' ');\n            return {\n              x: tmp[0],\n              y: tmp[1]\n            };\n          });\n          this.cubicTo(type, mapCoord);\n          break;\n\n        case 'S':\n          coord = coord.split(/[,]+/); // todo : Store last controle point and calc hi image through the last point.\n\n          var mapCoord = coord.map(el => {\n            var tmp = el.trim().split(' ');\n            return {\n              x: tmp[0],\n              y: tmp[1]\n            };\n          });\n          this.cubicTo(type, maxpCoord);\n          break;\n\n        case 'Z':\n          this.backToZero();\n          break;\n      }\n\n      prev = type;\n    }\n\n    return this.coords; //this.pathElements.join(this.endLine())\n  }\n\n  penUp() {\n    return 'S0 M5';\n  }\n\n  penDown() {\n    return 'S1000 M3';\n  }\n\n  endLine() {\n    return '\\n';\n  }\n\n  moveTo(type, coord) {\n    var mapCoord = {\n      x: coord[0],\n      y: coord[1]\n    };\n    let isUpperCase = type === type.toUpperCase();\n    let lastCoord = this.coords[this.coords.length - 1];\n    var obj = {\n      type: type,\n      position: isUpperCase ? 'absolute' : 'relative',\n      x: this.parseAndRound(mapCoord.x),\n      y: this.parseAndRound(mapCoord.y)\n    };\n    this.coords.push(obj);\n  }\n\n  moveFromTo(type, coord) {\n    var mapCoord = {\n      x: coord[0],\n      y: coord[1]\n    };\n    let isUpperCase = type === type.toUpperCase();\n    let lastCoord = this.getLastCoord();\n    var obj = {\n      type: type,\n      position: isUpperCase ? 'absolute' : 'relative',\n      x: lastCoord.x + this.parseAndRound(mapCoord.x),\n      y: lastCoord.y + this.parseAndRound(mapCoord.y)\n    };\n    this.coords.push(obj);\n  }\n\n  cubicTo(type, coord) {\n    var step = 3;\n    var lastCoord = this.getLastCoord();\n\n    for (var i = 0; i <= 1; i += step / 100) {\n      this.coords.push(this.getCubicBezierXYatPercent(lastCoord, coord[0], coord[1], coord[2], i));\n    }\n  }\n\n  getCubicBezierXYatPercent(startPt, controlPt1, controlPt2, endPt, percent) {\n    var x = this.CubicN(percent, startPt.x, controlPt1.x, controlPt2.x, endPt.x);\n    var y = this.CubicN(percent, startPt.y, controlPt1.y, controlPt2.y, endPt.y);\n    return {\n      type: 'C',\n      position: 'relative',\n      x: x,\n      y: y\n    };\n  }\n\n  getQuadraticBezierXYatPercent(startPt, controlPt, endPt, percent) {\n    var x = Math.pow(1 - percent, 2) * startPt.x + 2 * (1 - percent) * percent * controlPt.x + Math.pow(percent, 2) * endPt.x;\n    var y = Math.pow(1 - percent, 2) * startPt.y + 2 * (1 - percent) * percent * controlPt.y + Math.pow(percent, 2) * endPt.y;\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  CubicN(pct, a, b, c, d) {\n    var t2 = pct * pct;\n    var t3 = t2 * pct;\n    return a + (-a * 3 + pct * (3 * a - a * pct)) * pct + (3 * b + pct * (-6 * b + b * 3 * pct)) * pct + (c * 3 - c * 3 * pct) * t2 + d * t3;\n  }\n\n  map() {}\n\n  default() {}\n\n  getLastCoord() {\n    return this.coords[this.coords.length - 1];\n  }\n\n  backToZero() {\n    this.commands.push(this.penUp());\n    this.commands.push('X0 Y0');\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/004/gcode.js\n");

/***/ }),

/***/ "./src/004/main.js":
/*!*************************!*\
  !*** ./src/004/main.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_noise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/noise.js */ \"./src/lib/noise.js\");\n/* harmony import */ var _lib_noise_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_noise_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _gcode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gcode.js */ \"./src/004/gcode.js\");\n\n\nlet size = {\n  width: 0,\n  height: 0\n};\nconst paths = ['M 100 100 L 300 100 l-100,100h200v-40 M 100 10 C 50 20, 20 50, 10 100 C 20 50, 150 20, 100 10 S 150 150, 180 80 S 250 100, 80 30'];\nlet parser = new _gcode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\nlet setup = () => {\n  let downloadButton = document.querySelector('#download-button');\n  downloadButton.addEventListener('click', parse);\n  let container = document.querySelector('#canvas-container');\n  var ns = 'http://www.w3.org/2000/svg';\n  let frame = document.createElementNS(ns, 'svg');\n  size.width = window.innerWidth;\n  size.height = window.innerHeight * 0.6;\n  frame.setAttributeNS(null, 'width', size.width);\n  frame.setAttributeNS(null, 'height', size.height);\n  frame.id = \"svg-render\";\n\n  for (var i = paths.length - 1; i >= 0; i--) {\n    let p = document.createElementNS(ns, 'path');\n    p.setAttributeNS(null, 'd', paths[i]);\n    p.setAttributeNS(null, 'fill', 'none');\n    p.setAttributeNS(null, 'stroke', 'black');\n    frame.append(p);\n  }\n\n  container.append(frame); //draw()\n};\n\nlet download = () => {\n  activeRenderer = false;\n  var gcode = '';\n\n  for (var i = spiralManager.length - 1; i >= 0; i--) {\n    gcode += spiralManager[i].toGcode();\n  }\n\n  let render = document.querySelector('#canvas-container');\n  let link = document.createElement('a');\n  link.download = 'spiral.gcode';\n  link.href = 'data:text/plain,' + gcode;\n  link.click();\n};\n\nlet parse = () => {\n  let parsed = [];\n\n  for (var i = paths.length - 1; i >= 0; i--) {\n    parsed.push(parser.parseSVG(paths[i]));\n  }\n\n  console.log(parsed);\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", setup);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvMDA0L21haW4uanM/ODA4MiJdLCJuYW1lcyI6WyJzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJwYXRocyIsInBhcnNlciIsIkdjb2RlIiwic2V0dXAiLCJkb3dubG9hZEJ1dHRvbiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJzZSIsImNvbnRhaW5lciIsIm5zIiwiZnJhbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXRBdHRyaWJ1dGVOUyIsImlkIiwiaSIsImxlbmd0aCIsInAiLCJhcHBlbmQiLCJkb3dubG9hZCIsImFjdGl2ZVJlbmRlcmVyIiwiZ2NvZGUiLCJzcGlyYWxNYW5hZ2VyIiwidG9HY29kZSIsInJlbmRlciIsImxpbmsiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImNsaWNrIiwicGFyc2VkIiwicHVzaCIsInBhcnNlU1ZHIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEsSUFBSUEsSUFBSSxHQUFHO0FBQ1ZDLE9BQUssRUFBRSxDQURHO0FBRVZDLFFBQU0sRUFBRTtBQUZFLENBQVg7QUFJQSxNQUFNQyxLQUFLLEdBQUcsQ0FDYixrSUFEYSxDQUFkO0FBR0EsSUFBSUMsTUFBTSxHQUFJLElBQUlDLGlEQUFKLEVBQWQ7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHLE1BQU07QUFDakIsTUFBSUMsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQXJCO0FBQ0FGLGdCQUFjLENBQUNHLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDQyxLQUF6QztBQUNBLE1BQUlDLFNBQVMsR0FBR0osUUFBUSxDQUFDQyxhQUFULENBQXVCLG1CQUF2QixDQUFoQjtBQUNBLE1BQUlJLEVBQUUsR0FBRyw0QkFBVDtBQUNBLE1BQUlDLEtBQUssR0FBR04sUUFBUSxDQUFDTyxlQUFULENBQXlCRixFQUF6QixFQUE2QixLQUE3QixDQUFaO0FBQ0FiLE1BQUksQ0FBQ0MsS0FBTCxHQUFhZSxNQUFNLENBQUNDLFVBQXBCO0FBQ0FqQixNQUFJLENBQUNFLE1BQUwsR0FBY2MsTUFBTSxDQUFDRSxXQUFQLEdBQXFCLEdBQW5DO0FBQ0FKLE9BQUssQ0FBQ0ssY0FBTixDQUFxQixJQUFyQixFQUEyQixPQUEzQixFQUFvQ25CLElBQUksQ0FBQ0MsS0FBekM7QUFDQWEsT0FBSyxDQUFDSyxjQUFOLENBQXFCLElBQXJCLEVBQTJCLFFBQTNCLEVBQXFDbkIsSUFBSSxDQUFDRSxNQUExQztBQUNBWSxPQUFLLENBQUNNLEVBQU4sR0FBVSxZQUFWOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHbEIsS0FBSyxDQUFDbUIsTUFBTixHQUFlLENBQTVCLEVBQStCRCxDQUFDLElBQUksQ0FBcEMsRUFBdUNBLENBQUMsRUFBeEMsRUFBNEM7QUFDM0MsUUFBSUUsQ0FBQyxHQUFHZixRQUFRLENBQUNPLGVBQVQsQ0FBeUJGLEVBQXpCLEVBQTZCLE1BQTdCLENBQVI7QUFDQVUsS0FBQyxDQUFDSixjQUFGLENBQWlCLElBQWpCLEVBQXVCLEdBQXZCLEVBQTRCaEIsS0FBSyxDQUFDa0IsQ0FBRCxDQUFqQztBQUNBRSxLQUFDLENBQUNKLGNBQUYsQ0FBaUIsSUFBakIsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0I7QUFDQUksS0FBQyxDQUFDSixjQUFGLENBQWlCLElBQWpCLEVBQXVCLFFBQXZCLEVBQWlDLE9BQWpDO0FBQ0FMLFNBQUssQ0FBQ1UsTUFBTixDQUFhRCxDQUFiO0FBQ0E7O0FBQ0RYLFdBQVMsQ0FBQ1ksTUFBVixDQUFpQlYsS0FBakIsRUFsQmlCLENBbUJqQjtBQUNBLENBcEJEOztBQXFCQSxJQUFJVyxRQUFRLEdBQUcsTUFBTTtBQUNwQkMsZ0JBQWMsR0FBRyxLQUFqQjtBQUNBLE1BQUlDLEtBQUssR0FBRyxFQUFaOztBQUNBLE9BQUssSUFBSU4sQ0FBQyxHQUFHTyxhQUFhLENBQUNOLE1BQWQsR0FBdUIsQ0FBcEMsRUFBdUNELENBQUMsSUFBSSxDQUE1QyxFQUErQ0EsQ0FBQyxFQUFoRCxFQUFvRDtBQUNsRE0sU0FBSyxJQUFJQyxhQUFhLENBQUNQLENBQUQsQ0FBYixDQUFpQlEsT0FBakIsRUFBVDtBQUNEOztBQUNELE1BQUlDLE1BQU0sR0FBR3RCLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixtQkFBdkIsQ0FBYjtBQUNBLE1BQUlzQixJQUFJLEdBQUd2QixRQUFRLENBQUN3QixhQUFULENBQXVCLEdBQXZCLENBQVg7QUFDQUQsTUFBSSxDQUFDTixRQUFMLEdBQWdCLGNBQWhCO0FBQ0FNLE1BQUksQ0FBQ0UsSUFBTCxHQUFZLHFCQUFxQk4sS0FBakM7QUFDQUksTUFBSSxDQUFDRyxLQUFMO0FBQ0EsQ0FYRDs7QUFhQSxJQUFJdkIsS0FBSyxHQUFHLE1BQU07QUFDakIsTUFBSXdCLE1BQU0sR0FBRyxFQUFiOztBQUNBLE9BQUssSUFBSWQsQ0FBQyxHQUFHbEIsS0FBSyxDQUFDbUIsTUFBTixHQUFlLENBQTVCLEVBQStCRCxDQUFDLElBQUksQ0FBcEMsRUFBdUNBLENBQUMsRUFBeEMsRUFBNEM7QUFDM0NjLFVBQU0sQ0FBQ0MsSUFBUCxDQUFZaEMsTUFBTSxDQUFDaUMsUUFBUCxDQUFnQmxDLEtBQUssQ0FBQ2tCLENBQUQsQ0FBckIsQ0FBWjtBQUNBOztBQUVEaUIsU0FBTyxDQUFDQyxHQUFSLENBQVlKLE1BQVo7QUFDQSxDQVBEOztBQVFBM0IsUUFBUSxDQUFDRSxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOENKLEtBQTlDIiwiZmlsZSI6Ii4vc3JjLzAwNC9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm9pc2UgfSBmcm9tICdAL2xpYi9ub2lzZS5qcydcbmltcG9ydCBHY29kZSBmcm9tICcuL2djb2RlLmpzJ1xuXG5sZXQgc2l6ZSA9IHtcblx0d2lkdGg6IDAsXG5cdGhlaWdodDogMFxufVxuY29uc3QgcGF0aHMgPSBbXG5cdCdNIDEwMCAxMDAgTCAzMDAgMTAwIGwtMTAwLDEwMGgyMDB2LTQwIE0gMTAwIDEwIEMgNTAgMjAsIDIwIDUwLCAxMCAxMDAgQyAyMCA1MCwgMTUwIDIwLCAxMDAgMTAgUyAxNTAgMTUwLCAxODAgODAgUyAyNTAgMTAwLCA4MCAzMCdcbl1cbmxldCBwYXJzZXIgPSAgbmV3IEdjb2RlKClcbmxldCBzZXR1cCA9ICgpID0+IHtcblx0bGV0IGRvd25sb2FkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rvd25sb2FkLWJ1dHRvbicpXG5cdGRvd25sb2FkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGFyc2UpXG5cdGxldCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FudmFzLWNvbnRhaW5lcicpXG5cdHZhciBucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zydcblx0bGV0IGZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCAnc3ZnJylcblx0c2l6ZS53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIFxuXHRzaXplLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIDAuNlxuXHRmcmFtZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBzaXplLndpZHRoKVxuXHRmcmFtZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0Jywgc2l6ZS5oZWlnaHQpXG5cdGZyYW1lLmlkPSBcInN2Zy1yZW5kZXJcIlxuXHRmb3IgKHZhciBpID0gcGF0aHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRsZXQgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgJ3BhdGgnKVxuXHRcdHAuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBwYXRoc1tpXSlcblx0XHRwLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJ25vbmUnKVxuXHRcdHAuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZScsICdibGFjaycpXG5cdFx0ZnJhbWUuYXBwZW5kKHApXG5cdH1cblx0Y29udGFpbmVyLmFwcGVuZChmcmFtZSlcblx0Ly9kcmF3KClcbn1cbmxldCBkb3dubG9hZCA9ICgpID0+IHtcblx0YWN0aXZlUmVuZGVyZXIgPSBmYWxzZTtcblx0dmFyIGdjb2RlID0gJydcblx0Zm9yICh2YXIgaSA9IHNwaXJhbE1hbmFnZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHQgZ2NvZGUgKz0gc3BpcmFsTWFuYWdlcltpXS50b0djb2RlKClcblx0fVxuXHRsZXQgcmVuZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbnZhcy1jb250YWluZXInKVxuXHRsZXQgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuXHRsaW5rLmRvd25sb2FkID0gJ3NwaXJhbC5nY29kZSdcblx0bGluay5ocmVmID0gJ2RhdGE6dGV4dC9wbGFpbiwnICsgZ2NvZGUgXG5cdGxpbmsuY2xpY2soKVxufVxuXG5sZXQgcGFyc2UgPSAoKSA9PiB7XG5cdGxldCBwYXJzZWQgPSBbXVxuXHRmb3IgKHZhciBpID0gcGF0aHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRwYXJzZWQucHVzaChwYXJzZXIucGFyc2VTVkcocGF0aHNbaV0pKVxuXHR9XG5cdFxuXHRjb25zb2xlLmxvZyhwYXJzZWQpXG59XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBzZXR1cClcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/004/main.js\n");

/***/ }),

/***/ "./src/lib/noise.js":
/*!**************************!*\
  !*** ./src/lib/noise.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n(function (global) {\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n  var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\n  var perm = new Array(512);\n  var gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v;\n\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6; // 2D simplex noise\n\n  module.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70 * (n0 + n1 + n2);\n  }; // 3D simplex noise\n\n\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t;\n    var z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 32 * (n0 + n1 + n2 + n3);\n  }; // ##### Perlin noise stuff\n\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  } // 2D Perlin Noise\n\n\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n    var u = fade(x); // Interpolate the four results\n\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  }; // 3D Perlin Noise\n\n\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z); // Interpolate\n\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/noise.js\n");

/***/ })

/******/ });